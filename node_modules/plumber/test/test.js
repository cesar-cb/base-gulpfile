var chai = require('chai');
chai.should();
var chaiAsPromised = require("chai-as-promised");

chai.use(chaiAsPromised);

require('mocha-as-promised')();

var fs = require('fs');

var SourceMapConsumer = require('source-map').SourceMapConsumer;


var plumber = require('..');


function readFile(path) {
    return fs.readFileSync(path).toString();
}

function readJsonFile(path) {
    return JSON.parse(readFile(path));
}

describe('SourceMap', function() {
    var SourceMap = plumber.SourceMap;

    describe('#fromSource', function() {
        var path = 'test/fixtures/source.js';
        var source = readFile(path);

        it('should be a function', function() {
            SourceMap.fromSource.should.be.a('function');
        });

        it('should return a source map object of version 3', function() {
            var map = SourceMap.fromSource(source, path);

            // Can't do instanceof as the prototype is not exposed
            map.should.be.an('object');
            map.version.should.equal(3);
        });

        it('should return a source map referencing the original filename as file', function() {
            var map = SourceMap.fromSource(source, path);
            map.file.should.equal('source.js');
        });

        it('should return a source map referencing the path in sources', function() {
            var map = SourceMap.fromSource(source, path);
            map.sources.should.deep.equal([path]);
        });

        it('should return a source map that includes the source contents', function() {
            var map = SourceMap.fromSource(source, path);
            map.sourcesContent.should.deep.equal([source]);
        });

        it('should return a source map mapping the file onto itself', function() {
            var map = SourceMap.fromSource(source, path);
            var consumer = new SourceMapConsumer(map);

            var numLines = numLines = source.split('\n').length;
            for (var line = 1; line <= numLines; line++) {
                consumer.originalPositionFor({line: line, column: 0}).should.deep.equal({
                    source: path,
                    line: line,
                    column: 0,
                    name: null
                });
            }
        });
    });


    describe('#fromMapObject', function() {

        it('should be a function', function() {
            SourceMap.fromMapObject.should.be.a('function');
        });

        it('should return a source map object identical to the input', function() {
            var mapObject = {
                version: 3,
                file: 'source.js',
                mappings: 'AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA',
                sources: [ 'test/fixtures/source.js' ],
                sourcesContent: [ 'var x = 3;\nvar y = x;\n\n/* a comment */\n\nfunction inc(x) {\n    return x + 1;\n}\n\nvar z = inc(x);\n\n' ],
                names: ['x']
            };
            var map = SourceMap.fromMapObject(mapObject);

            map.should.be.an('object');
            ['version', 'file', 'mappings', 'sources',
             'sourcesContent', 'names'].forEach(function(key) {
                 map[key].should.equal(mapObject[key]);
            });
        });

    });


    describe('prototype', function() {
        var path = 'test/fixtures/source.js.map';
        var sourceMapObj = readJsonFile(path);
        var sourceMap;

        beforeEach(function() {
            sourceMap = SourceMap.fromMapObject(sourceMapObj);
        });

        describe('#toString', function() {
            it('should return the original data', function() {
                var flattenedOriginalMap = JSON.stringify(sourceMapObj);
                sourceMap.toString().should.equal(flattenedOriginalMap);
            });
        });

        describe('#mapSourcePaths', function() {
            var mappedMap;

            beforeEach(function() {
                mappedMap = sourceMap.mapSourcePaths(function(path) {
                    return path + '-test';
                });
            });

            it('should map the source paths', function() {
                mappedMap.sources.should.deep.equal(['test/fixtures/source.js-test']);
            });

            it('should retain all other fields', function() {
                ['version', 'file', 'mappings',
                 'sourcesContent', 'names'].forEach(function(key) {
                     mappedMap[key].should.deep.equal(sourceMap[key]);
                });
            });
        });

        describe('#rebaseSourcePaths', function() {
            var rebasedMap;

            beforeEach(function() {
                rebasedMap = sourceMap.rebaseSourcePaths('test');
            });

            it('should map the source paths', function() {
                rebasedMap.sources.should.deep.equal(['fixtures/source.js']);
            });

            it('should retain all other fields', function() {
                ['version', 'file', 'mappings',
                 'sourcesContent', 'names'].forEach(function(key) {
                     rebasedMap[key].should.deep.equal(sourceMap[key]);
                });
            });
        });


        describe('#apply', function() {
            var concatPath = 'test/fixtures/concatenated.js.map';
            var concatSourceMapObj = readJsonFile(concatPath);
            var concatSourceMap;
            var minPath = 'test/fixtures/concatenated.min.js.map';
            var minSourceMapObj = readJsonFile(minPath);
            var minSourceMap;

            beforeEach(function() {
                concatSourceMap = SourceMap.fromMapObject(concatSourceMapObj);
                minSourceMap = SourceMap.fromMapObject(minSourceMapObj);
            });

            it('should return the composition of both mappings', function() {
                var appliedMap = concatSourceMap.apply(minSourceMap);
                var consumer = new SourceMapConsumer(appliedMap);

                /*
                 function inc(n){return n+1}var x=3,y=x,z=inc(x);[...]
                 ^
                 */
                consumer.originalPositionFor({line: 1, column: 0}).should.deep.equal({
                    source: 'source.js',
                    line: 6,
                    column: 0,
                    name: null
                });
                /*
                 function inc(n){return n+1}var x=3,y=x,z=inc(x);[...]
                                 ^
                 */
                consumer.originalPositionFor({line: 1, column: 16}).should.deep.equal({
                    source: 'source.js',
                    line: 7,
                    column: 0,
                    name: null
                });
                /*
                 function inc(n){return n+1}var x=3,y=x,z=inc(x);[...]
                                            ^
                 */
                consumer.originalPositionFor({line: 1, column: 27}).should.deep.equal({
                    source: 'source.js',
                    line: 1,
                    column: 0,
                    name: null
                });
                /*
                 function inc(n){return n+1}var x=3,y=x,z=inc(x);[...]
                                                ^
                 */
                consumer.originalPositionFor({line: 1, column: 31}).should.deep.equal({
                    source: 'source.js',
                    line: 1,
                    column: 0,
                    name: 'x'
                });
                /*
                 function inc(n){return n+1}var x=3,y=x,z=inc(x);[...]
                                                    ^
                 */
                consumer.originalPositionFor({line: 1, column: 35}).should.deep.equal({
                    source: 'source.js',
                    line: 2,
                    column: 0,
                    name: 'y'
                });
                /*
                 function inc(n){return n+1}var x=3,y=x,z=inc(x);[...]
                                                        ^
                 */
                consumer.originalPositionFor({line: 1, column: 39}).should.deep.equal({
                    source: 'source.js',
                    line: 10,
                    column: 0,
                    name: 'z'
                });
                /*
                 [...]var x=3,y=x,z=inc(x);define([],function(){function n(n){[...]
                                           ^
                 */
                consumer.originalPositionFor({line: 1, column: 48}).should.deep.equal({
                    source: 'library.js',
                    line: 2,
                    column: 0,
                    name: 'define'
                });
                /*
                 [...]var x=3,y=x,z=inc(x);define([],function(){function n(n){[...]
                                                     ^
                 */
                consumer.originalPositionFor({line: 1, column: 58}).should.deep.equal({
                    source: 'library.js',
                    line: 2,
                    column: 0, // Note: only line info...
                    name: null
                });
                /*
                 [...]define([],function(){function n(n){return n+r}var r=1;return n});
                                           ^
                 */
                consumer.originalPositionFor({line: 1, column: 69}).should.deep.equal({
                    source: 'library.js',
                    line: 5,
                    column: 0,
                    name: null
                });
                /*
                 [...]define([],function(){function n(n){return n+r}var r=1;return n});
                                                         ^
                 */
                consumer.originalPositionFor({line: 1, column: 83}).should.deep.equal({
                    source: 'library.js',
                    line: 6,
                    column: 0,
                    name: null
                });
                /*
                 [...]define([],function(){function n(n){return n+r}var r=1;return n});
                                                                    ^
                 */
                consumer.originalPositionFor({line: 1, column: 94}).should.deep.equal({
                    source: 'library.js',
                    line: 3,
                    column: 0,
                    name: null
                });
                /*
                 [...]define([],function(){function n(n){return n+r}var r=1;return n});
                                                                        ^
                 */
                consumer.originalPositionFor({line: 1, column: 98}).should.deep.equal({
                    source: 'library.js',
                    line: 3,
                    column: 0,
                    name: 'number'
                });
                /*
                 [...]define([],function(){function n(n){return n+r}var r=1;return n});
                                                                            ^
                 */
                consumer.originalPositionFor({line: 1, column: 102}).should.deep.equal({
                    source: 'library.js',
                    line: 9,
                    column: 0,
                    name: null
                });
            });

            it('should contain the sources and sourcesContent from the first map', function() {
                var appliedMap = concatSourceMap.apply(minSourceMap);
                appliedMap.sources.should.deep.equal(concatSourceMap.sources);
                appliedMap.sourcesContent.should.deep.equal(concatSourceMap.sourcesContent);
            });
        });

        // TODO: append, copy
        // TODO: properties
    });
});
